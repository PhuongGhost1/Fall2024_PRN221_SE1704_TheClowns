// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketResell_BusinessObject;

#nullable disable

namespace TicketResell_DAO.Migrations
{
    [DbContext(typeof(TicketResellContext))]
    partial class TicketResellContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketResell_BusinessObject.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("buyer_id");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime")
                        .HasColumnName("end_at");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("SellerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("seller_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at");

                    b.HasKey("Id")
                        .HasName("PK__chat__3213E83FA6801B67");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SellerId");

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__EventType__3213E83FDA2D07AD");

                    b.ToTable("EventType", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("comment");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("submitted_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__feedback__3213E83F84D22FB2");

                    b.HasIndex("UserId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PK__image__3213E83FBC9FA28E");

                    b.HasIndex("TicketId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("PackageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("package_type");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal?>("SubscriptionFee")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("subscription_fee");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime")
                        .HasColumnName("valid_to");

                    b.HasKey("Id")
                        .HasName("PK__membership__3213E83F19560ECA");

                    b.HasIndex("UserId");

                    b.ToTable("membership", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__notification__3213E83FEC850A9B");

                    b.HasIndex("UserId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("delivery_address");

                    b.Property<string>("DeliveryPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("delivery_phone");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__order__3213E83F78DE46FD");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__role__3213E83FCB30EE41");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.SocialMedium", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("link");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__social_media__3213E83F637FDEB7");

                    b.HasIndex("UserId");

                    b.ToTable("social_media", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Support", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__support__3213E83F58F4AB2F");

                    b.HasIndex("UserId");

                    b.ToTable("support", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime")
                        .HasColumnName("event_date");

                    b.Property<string>("EventName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("event_name");

                    b.Property<Guid?>("EventTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_type_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration_date");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner_id");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("serial");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("submitted_at");

                    b.Property<string>("TicketStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ticket_status");

                    b.HasKey("Id")
                        .HasName("PK__ticket__3213E83F4C9F3B98");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<decimal?>("PenaltyAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("penalty_amount");

                    b.Property<decimal?>("PlatformFee")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("platform_fee");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_status");

                    b.Property<string>("TypeTransaction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type_transaction");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("UserType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("PK__transact__3213E83F28AA59AE");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("ReputationPoints")
                        .HasColumnType("int")
                        .HasColumnName("reputation_points");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__User__3213E83FE1FCAFE4");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__user_role__3213E83FC17315BB");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Chat", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.User", "BuyerUser")
                        .WithMany("ChatBuyers")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__chat__buyer_id__45F365D3");

                    b.HasOne("TicketResell_BusinessObject.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("TicketResell_BusinessObject.User", "SellerUser")
                        .WithMany("ChatSellers")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__chat__seller_id__45F365D3");

                    b.Navigation("BuyerUser");

                    b.Navigation("Conversation");

                    b.Navigation("SellerUser");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Feedback", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__feedback__user_id__4CA06362");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Image", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.Ticket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__image__ticket_id__7D439ABD");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Membership", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__membership__user_id__5DCAEF64");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Notification", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__notification__user_id__49C3F6B7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Order", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.Ticket", "Ticket")
                        .WithMany("Orders")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__order__ticket_id__71D1E811");

                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__order__user_id__70DDC3D8");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.SocialMedium", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("SocialMedia")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__social_media__user_id__398D8EEE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Support", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("Supports")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__support__user_id__4F7CD00D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Ticket", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.EventType", "EventType")
                        .WithMany("Tickets")
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("FK__ticket__event_ty__6E01572D");

                    b.HasOne("TicketResell_BusinessObject.User", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__ticket__owner_id__6D0D32F4");

                    b.Navigation("EventType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Transaction", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.Ticket", "Ticket")
                        .WithMany("Transactions")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__transaction__ticket__787EE5A0");

                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("TransactionUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.UserRole", b =>
                {
                    b.HasOne("TicketResell_BusinessObject.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__user_role__role_id__5AEE82B9");

                    b.HasOne("TicketResell_BusinessObject.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__user_role__user_id__59FA5E80");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.EventType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.Ticket", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TicketResell_BusinessObject.User", b =>
                {
                    b.Navigation("ChatBuyers");

                    b.Navigation("ChatSellers");

                    b.Navigation("Feedbacks");

                    b.Navigation("Memberships");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("SocialMedia");

                    b.Navigation("Supports");

                    b.Navigation("Tickets");

                    b.Navigation("TransactionUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
